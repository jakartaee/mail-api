<?xml version="1.0" encoding="iso-8859-1"?>
<!--

    Copyright (c) 1997, 2021 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Distribution License v. 1.0, which is available at
    http://www.eclipse.org/org/documents/edl-v10.php.

    SPDX-License-Identifier: BSD-3-Clause

-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
			    http://maven.apache.org/maven-v4_0_0.xsd">
    <parent>
	<groupId>com.sun.mail</groupId>
	<artifactId>android</artifactId>
	<version>1.6.8</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.sun.mail</groupId>
    <artifactId>android-activation</artifactId>
    <packaging>jar</packaging>
    <name>Jakarta Activation fork for Android</name>

    <!--
	This is a fork of Jakarta Activation that
	is sufficient for use by Jakarta Mail when running on Android.
	Android is not Java Compatible, and is missing the java.awt.datatransfer
	classes.  This fork of Activation breaks the dependency on the
	java.awt.datatransfer classes and thus isn't compatible with
	the Activation specification.  It should not be used by anything other
	than this Android-specific version of Jakarta Mail.
    -->

    <properties>
	<activation.spec.version>1.2</activation.spec.version>
	<activation.extensionName>
	    jakarta.activation.android
	</activation.extensionName>
	<activation.specificationTitle>
	    Jakarta Activation Specification
	</activation.specificationTitle>
	<activation.implementationTitle>
	    javax.activation
	</activation.implementationTitle>
	<activation.bundle.symbolicName>
	    ${project.groupId}.${project.artifactId}
	</activation.bundle.symbolicName>
	<activation.packages.export>
	    javax.activation.*; version=${activation.spec.version},
	    com.sun.activation.*; version=${activation.osgiversion}
	</activation.packages.export>
	<findbugs.skip>
	    false
	</findbugs.skip>
	<findbugs.exclude>
	    ${project.basedir}/exclude.xml
	</findbugs.exclude>
    </properties>

    <build>
	<resources>
	    <resource>
		<directory>src/main/resources</directory>
		<filtering>true</filtering>
	    </resource>
	</resources>
	<plugins>
	    <!--
		Configure compiler plugin to print lint warnings.
	    -->
	    <plugin>
		<artifactId>maven-compiler-plugin</artifactId>
		<executions>
		    <execution>
			<id>compile</id>
                        <goals>
                            <goal>compile</goal>
                        </goals>
			<configuration>
			    <source>1.7</source>
			    <target>1.7</target>
			    <fork>true</fork>
			    <!--
				ignore the errors that I don't
				want to fix now
			    -->
			    <compilerArgs>
				<arg>-Xlint</arg>
				<arg>-Xlint:-options</arg>
				<arg>-Xlint:-path</arg>
				<arg>-Xlint:-rawtypes</arg>
				<arg>-Xlint:-unchecked</arg>
				<arg>-Xlint:-finally</arg>
				<arg>-Xlint:-serial</arg>
				<arg>-Xlint:-cast</arg>
				<arg>-Xlint:-deprecation</arg>
				<arg>-Xlint:-dep-ann</arg>
				<arg>-Werror</arg>
			    </compilerArgs>
			    <showWarnings>true</showWarnings>
			</configuration>
		    </execution>
		    <execution>
			<id>testCompile</id>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
			<configuration>
                            <release>7</release>
			</configuration>
		    </execution>
		</executions>
	    </plugin>

	    <!--
		Configure test plugin to find *TestSuite classes.
	    -->
	    <plugin>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-surefire-plugin</artifactId>
		<configuration>
		    <includes>
			<include>**/*Test.java</include>
			<include>**/*TestSuite.java</include>
		    </includes>
		</configuration>
	    </plugin>

	    <plugin>
		<groupId>org.apache.felix</groupId>
		<artifactId>maven-bundle-plugin</artifactId>
		<configuration>
		    <instructions>
			<Bundle-SymbolicName>
			    ${activation.bundle.symbolicName}
			</Bundle-SymbolicName>
			<Export-Package>
			    ${activation.packages.export}
			</Export-Package>
			<Import-Package>
			    ${activation.packages.import}
			</Import-Package>
			<Private-Package>
			    ${activation.packages.private}
			</Private-Package>
			<DynamicImport-Package>
			    *
			</DynamicImport-Package>
		    </instructions>
		</configuration>
		<!--
		    Since we don't change the packaging type to bundle, we
		    need to configure the plugin to execute the manifest goal
		    during the process-classes phase of the build life cycle.
		-->
		<executions>
		    <execution>
			<id>osgi-manifest</id>
			<phase>process-classes</phase>
			<goals>
			    <goal>manifest</goal>
			</goals>
		    </execution>
		</executions>
	    </plugin>

	    <!--
		Since we don't want a qualifier like b05 or SNAPSHOT to
		appear in the OSGi package version attribute, we use
		the following plugin to populate a project property
		with an OSGi version that is equivalent to the maven
		version without the qualifier.
	    -->
	    <plugin>
		<groupId>org.glassfish.hk2</groupId>
		<artifactId>osgiversion-maven-plugin</artifactId>
		<version>${hk2.plugin.version}</version>
		<configuration>
		    <dropVersionComponent>qualifier</dropVersionComponent>
		    <versionPropertyName>activation.osgiversion</versionPropertyName>
		</configuration>
		<executions>
		    <execution>
			<id>compute-osgi-version</id>
			<goals>
			    <goal>compute-osgi-version</goal>
			</goals>
		    </execution>
		</executions>
	    </plugin>
	</plugins>
    </build>

    <dependencies>
	<dependency>
	    <groupId>junit</groupId>
	    <artifactId>junit</artifactId>
	    <scope>test</scope>
	</dependency>
    </dependencies>
</project>
