			     NOTES
			     =====

		    Jakarta Mail API 2.0.1 release
		    ------------------------------

Welcome to the 2.0.1 release of the Jakarta Mail API implementation. 

Please refer to CHANGES.txt for a list of the changes since the 
previous release.

Please see the FAQ at https://eclipse-ee4j.github.io/mail/FAQ

Protocol Providers
------------------

The Jakarta Mail API jar file "jakarta.mail.jar" includes the full Jakarta Mail
API implementation and the Sun protocol providers - IMAP, SMTP, and
POP3.  The simplest way to use the Jakarta Mail API is to just use the
jakarta.mail.jar file and ignore the other jar files in this package.

In some cases it may be desirable to minimize the size of the Jakarta Mail
API code used by an application (e.g., in a microservice).
In this case you might want to include the "mailapi.jar" file, which
includes *no* protocol providers, along with just the jar file for the
protocol provider you need.  For example, a microservice that only needs
to send mail could use the "mailapi.jar" file and the "smtp.jar" file.

An important note when using the separate protocol provider jar files:

-  You can't mix and match the Sun protocol providers between different
   releases of the Jakarta Mail API.  The Sun protocol providers depend on
   implementation-specific utility APIs within the mailapi.jar file.
   (Third party protocol providers that don't depend on these APIs
   should work fine.)


NOTE: The Sun protocol provider documentation is included in the javadocs
      for the Jakarta Mail API.  This documentation describes how to
      use features of the Sun protocol providers to directly access
      some features of the SMTP, IMAP, and POP3 protocols that are
      not otherwise supported by the standard Jakarta Mail API.


Gmail IMAP Provider
-------------------

This release includes an EXPERIMENTAL Gmail IMAP provider.
Normal use of Gmail is handled by the standard "imap" protocol
provider, but the new "gimap" protocol provider supports additional
Gmail-specific non-standard features.  See the javadocs for the
com.sun.mail.gimap package for details.  Note that the gimap.jar file
needs to be added to your CLASSPATH to use this new provider.


SASL Support
------------

On systems that support the Java SASL API (javax.security.sasl, JSR-28),
such as J2SE 5.0 and later, the IMAP provider can use the SASL API to
find an appropriate authentication mechanism.  The SASL API also allows
you to plug in support for custom authentication mechanisms.  See The
Java SASL API Programming and Deployment Guide at
https://docs.oracle.com/javase/8/docs/technotes/guides/security/sasl/sasl-refguide.html
for details on developing custom SASL mechanisms.  See the javadocs for
the com.sun.mail.imap package for the properties required to enable and
configure SASL support.


DSN Support
-----------

This release of Jakarta Mail includes EXPERIMENTAL support for creating
and parsing Delivery Status Notifications, as defined by RFC 3462
and RFC 3464.  To make use of this support you need to include dsn.jar
in your CLASSPATH along with jakarta.mail.jar.  See the javadocs for the
com.sun.mail.dsn package for more details.

The DSN package also provides support for creating and parsing Message
Disposition Notifications, as defined by RFC 3798.

The APIs unique to this package should be considered EXPERIMENTAL.
They may be changed in the future in ways that are incompatible with
applications using the current APIs.


NTLM Support
------------

This release of Jakarta Mail includes EXPERIMENTAL support for the
Microsoft NTLM authentication mechanism used by Exchange.  See the
file NTLMNOTES.txt for details.


OSGi Support
------------

The Jakarta Mail jar files are now OSGi bundles.  Please let us know
of any problems using Jakarta Mail with OSGi.


How to submit bug reports
-------------------------

If you've found a bug, or if you just need help figuring out how to use
the Jakarta Mail API, please try to include the following information in
your message to us:

    - a program or code snippet that shows the problem
    - the platform you are using
    - the mail server (vendor name, version number) you are using
    - your environment variable settings
    - a stack trace, if appropriate
    - a protocol trace, after turning on session debugging, if appropriate

Most of the problems reported to us fail to include enough of the above
information to allow us to diagnose your problem.  It will save you and
us time if you include this information in your first message to us.

By far the most common problems we see are:

Your problem:	Something doesn't work right when talking to my mail server.
Our response:	Turn on session debugging and send us the protocol trace.
		See the demo program documentation for how to turn on
		session debugging for the demo programs.  In your own
		program, call "session.setDebug(true);".

Your problem:	jakarta.mail or jakarta.activation classes not found when compiling.
Our response:	You didn't set CLASSPATH correctly to find jakarta.mail.jar and
		jakarta.activation.jar.  See README.txt.

Your problem:	NoSuchProviderException - No such provider for rfc822.
Our response:	You unjar'ed jakarta.mail.jar.  Don't.

Your problem:	How do I create a message with an attachment?
Our response:	Create a message with a MimeMultipart content.  See the
		sendfile.html and msgmultisendsample.java demo programs.

Please check the FAQ at https://eclipse-ee4j.github.io/mail/FAQ
before submitting bug reports.

Send your bug reports to:

	mail-dev@eclipse.org




Servers tested with:
--------------------

  The IMAP implementation works with IMAP4 and IMAP4rev1 servers.
  The current release has been tested with:
	Oracle Beehive
	Oracle Communications Messaging Server 8.0
	UW IMAP4 server version 2003.339
	Cyrus IMAP4 server version 1.6.19
	Microsoft Exchange 2010
	Microsoft Exchange 2013
	Microsoft Exchange 2016

  Previous releases have been tested with:
	Sun Java System Messaging Server version 5.2
	Sun Java System Messaging Server version 6.3
	Sun Java System Messaging Server version 7.0
	Sun Internet Mail Server version 2.0, 3.2, and 4.0
	Netscape Messaging Server version 3.01 and 4.1
	Microsoft MCIS Mail Server
	Lotus Notes
	Software.com IMAP server
	Qualcomm Worldmail

  The current release of the SMTP implementation has been tested with:
	Sendmail version 8.13.8
	Oracle Beehive
	Oracle Communications Messaging Server 8.0
	Microsoft Exchange 2010
	Microsoft Exchange 2013
	Microsoft Exchange 2016

  Previous releases have been tested with:
	Sendmail version 8.6 and 8.9.1
	Sun Java System Messaging Server version 5.2
	Sun Java System Messaging Server version 6.3
	Sun Java System Messaging Server version 7.0
	Sun Internet Mail Server version 3.2 and 4.0
	Netscape Messaging Server version 3.01 and 4.1
	Microsoft Exchange
	Microsoft MCIS Mail Server
	Qualcomm Worldmail

How to give feedback
--------------------

Please send your feedback to this email-address:

	mail-dev@eclipse.org

Check out our website at https://eclipse-ee4j.github.io/mail/.

You can also find help on StackOverflow:

	https://stackoverflow.com/questions/tagged/javamail


------------------------------------------------------------------
